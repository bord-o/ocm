type bool 
  = True 
  | False 

type nat
  = Z
  | S nat

type value
  = A
  | B
  | C
  | D
  | E

type valuelist
  = Nil
  | Cons value valuelist

fun booland : bool -> bool
  = True, True -> True
  | False, False -> False
  | False, True -> False
  | True, False -> False

fun add : nat, nat -> nat
  = m, Z -> m
  | m, S n -> S (add m n)

fun reverse : valuelist, valuelist -> valuelist 
  = acc, Nil -> acc
  | acc, Cons x xs -> reverse (Cons x acc) xs

fun ite : bool, valuelist, valuelist -> valuelist
  = True, a, b -> a
  | False, a, b -> b

fun filter: filter, valuelist -> valuelist
  = f, Nil -> Nil
  | f, Cons x xs -> ite (f x) (Cons (x) (filter f xs )) (filter f xs)

fun goodletter : value -> bool 
  = A -> True
  | B -> False
  | C -> True
  | D -> False
  | E -> False

fun valueeq : value, value -> bool
  = A, A -> True
  | B, B -> True
  | C, C -> True
  | D, D -> True
  | E, E -> True
  | x, y -> False

fun not : bool -> bool
  = True -> False
  | False -> True

fun vlisteq : valuelist, valuelist -> bool
  = Nil, Nil -> True
  | Cons x xs, Cons y ys -> booland (valueeq x y) (vlisteq xs ys)

fun ispalindrome : valuelist -> bool 
  = l -> vlisteq (l) (reverse (Nil) l)
;

ispalindrome (Cons (C) (Cons (B) (Cons (C) Nil)))
